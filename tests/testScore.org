* Binary outcome
** riskScore vs ModelGood

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(riskScore)
library(ModelGood)
library(data.table)
library(rms)
N <- 300
M <- 200
set.seed(18)
train.d <- sampleData(N,outcome="binary")
test.d <- sampleData(M,outcome="binary")
f1 <- glm(Y~X1+X2+X6+X8,data=train.d,family=binomial)
f2 <- lrm(Y~X1+X2+X9,data=train.d)
f3 <- lrm(Y~X6,data=train.d)
u <- Score(list(f1,f2,f3),data=test.d,formula=Y~1,metrics=c("Brier","auc"),test=FALSE)
library(ModelGood)
## v <- Brier(list(f1,f2,f3),data=test.d,splitMethod="none",verbose=FALSE)
v <- Roc(list(f1,f2,f3),data=test.d,splitMethod="none",verbose=FALSE)
cbind(Auc=unlist(v$Auc),Brier=unlist(v$Brier))
u
#+END_SRC

#+RESULTS[<2016-01-04 16:29:21> c2f416bbb0c13fe2b508fac8b564bb8134863bb0]:
:RESULTS:
                Auc     Brier
glm.Auc   0.8208321 0.1758537
lrm.Auc   0.6624662 0.2389216
lrm.1.Auc 0.7604760 0.2016796

Metric Brier:
        model     Brier
1: Prevalence 0.2499750
2:        glm 0.1758537
3:        lrm 0.2389216
4:      lrm.1 0.2016796

Metric AUC:
        model       AUC
1: Prevalence 0.5000000
2:        glm 0.8203820
3:        lrm 0.6609661
4:      lrm.1 0.7586759
:END:

* Survival outcome

** Score vs timeROC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(data.table)
library(prodlim)
library(ModelGood)
library(timeROC)
library(pec)
library(rms)
library(riskScore)
set.seed(19)
N <- 300
M <- 300
m <- lvm()
train.d <- SimSurv(N)
test.d <- SimSurv(M)
test.d$time <- round(test.d$time,1)
f12 <- coxph(Surv(time,status)~X1+X2,data=train.d)
test.d$X2 <- abs(round(test.d$X2,2))
tROCtime <- system.time(tROC <- with(test.d,timeROC(T=time,delta=status,marker=X2,times=5,cause=1,iid=TRUE)))
Rscoretime <- system.time(Rscore <- Score(list(test.d$X2),data=test.d,formula=Surv(time,status)~1,times=5,metrics=c("AUC"),nullModel=FALSE,test=TRUE))
print(cbind(timeROC.AUC=tROC$AUC[[2]],timeROC.seAUC=tROC$inference$vect_sd_1[[2]],Rscore$AUC$score))
cbind(timeROC.time=tROCtime[[1]],Rscore.time=Rscoretime[[1]])
#+END_SRC   

#+RESULTS[<2016-01-06 15:24:51> cd80a9df8d5aed0839b2456d6757b4fb12737ec8]:
:RESULTS:
   timeROC.AUC timeROC.seAUC   model times       AUC   se.AUC lower.AUC upper.AUC
1:   0.8333333     0.1944444 numeric     5 0.8333333 0.172809 0.4946339  1.172033
     timeROC.time Rscore.time
[1,]        0.004       0.044
:END:

** Score versus timeROC::compare

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(data.table)
library(prodlim)
library(ModelGood)
library(timeROC)
library(pec)
library(rms)
Source(riskScore,silent=TRUE)
Source(timeROC,silent=TRUE)
set.seed(19)
N <- 300
M <- 300
m <- lvm()
train.d <- SimSurv(N)
test.d <- SimSurv(M)
f12 <- coxph(Surv(time,status)~X1+X2,data=train.d)
f2 <- coxph(Surv(time,status)~X2,data=train.d)
test.d$X2 <- abs(round(test.d$X2,2))
system.time({
                p12 <- with(test.d,timeROC(T=time,delta=status,marker=-predictSurvProb(f12,times=5,newdata=test.d),times=5,cause=1,iid=TRUE));
                p2 <- with(test.d,timeROC(T=time,delta=status,marker=X2,times=5,cause=1,iid=TRUE));
                print(compare(p2,p12))})
system.time(Rscore <- Score(list(f12,test.d$X2),data=test.d,formula=Surv(time,status)~1,times=c(5,10),metrics=c("AUC")))
Rscore
#+END_SRC

#+RESULTS[<2016-01-04 16:40:17> 63e890d1ff6d88b359aea5c0838ee53380360c5a]:
:RESULTS:
$deltaAUC
        t=5 
-0.09717067 

$lowerDelta
       t=5 
-0.1566106 

$upperDelta
        t=5 
-0.03773071 

$p_values_AUC
      t=5 
0.0013549 

attr(,"class")
[1] "compareAUC"

Seconds:
   user  system elapsed 
  0.152   0.000   0.153

Seconds:
   user  system elapsed 
  0.136   0.000   0.135

Metric AUC:
$score
          model times       AUC       se.AUC lower.AUC upper.AUC
1: Kaplan-Meier     5 0.5000000 1.580225e-17 0.5000000 0.5000000
2: Kaplan-Meier    10 0.5000000 1.719319e-17 0.5000000 0.5000000
3:        coxph     5 0.6354324 3.556594e-02 0.5657244 0.7051403
4:        coxph    10 0.6203357 5.721580e-02 0.5081948 0.7324766
5:      numeric     5 0.5382617 3.760396e-02 0.4645593 0.6119641
6:      numeric    10 0.4791488 5.857899e-02 0.3643361 0.5939615

$test
   times  model1       model2       delta        lower       upper            p
1:     5 numeric Kaplan-Meier  0.03826170 -0.035440713  0.11196411 0.3089198375
2:     5 numeric        coxph -0.09717067 -0.156610636 -0.03773071 0.0013548996
3:     5   coxph Kaplan-Meier  0.13543237  0.065724415  0.20514033 0.0001401385
4:    10 numeric Kaplan-Meier -0.02085119 -0.135663908  0.09396153 0.7218780396
5:    10 numeric        coxph -0.14118693 -0.231409084 -0.05096479 0.0021613889
6:    10   coxph Kaplan-Meier  0.12033574  0.008194845  0.23247664 0.0354490803
:END:

** Paul's Webappendix vs Score

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(prodlim)
library(data.table)
library(rms)
library(pec)
library(survival)
Source(riskScore,silent=TRUE)
source("~/research/tmp/Data-and-R-code/Rcode/Rfunctions/BS.R")
source("~/research/tmp/Data-and-R-code/Rcode/Rfunctions/ComputeiidKM.R")
set.seed(27)
train <- SimSurv(100)
d <- SimSurv(4000)
f12 <- cph(Surv(time,status)~X1+X2,data=train,surv=TRUE)
p <- 1-predictSurvProb(f12,newdata=d,times=5)
system.time(a <- BS(timepoints=5,d$time,d$status,p,cause=1,compute.iid=TRUE))
system.time(b <- Score(list(p),formula=Surv(time,status)~1,times=5,data=d,metrics="Brier"))
print(cbind(TROC.BS=a$BS,TROC.se=a$sd))
print(b)
#+END_SRC

#+RESULTS[<2016-01-04 16:41:56> 4f29d14b742747150fc340fca1e3bc01a165637d]:
:RESULTS:

Seconds:
   user  system elapsed 
  3.856   0.228   4.085

Seconds:
   user  system elapsed 
  0.776   0.116   0.892
      TROC.BS     TROC.se
t=5 0.1671342 0.003809548

Metric Brier:
$score
          model times     Brier    se.Brier lower.Brier upper.Brier
1: Kaplan-Meier     5 0.2379657 0.001808047   0.2344220   0.2415094
2:       matrix     5 0.1671342 0.003809548   0.1596677   0.1746008

$test
   times model1       model2       delta       lower       upper            p
1:     5 matrix Kaplan-Meier -0.07083145 -0.07792863 -0.06373426 3.334462e-85
:END:

*** Temp
    
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(survival)
library(riskScore)
library(pec)
library(rms)
data(pbc)
pbc <- na.omit(pbc)
a <- cph(Surv(time,status!=0)~age+edema+sex+log(bili),data=pbc,surv=TRUE)
b <- cph(Surv(time,status!=0)~age+edema+sex+log(bili)+log(protime)+log(albumin),data=pbc,surv=TRUE)
set.seed(17)
sc <- Score(list(a,b),data=pbc,formula=Surv(time,status!=1)~1,times=c(1000),metrics=c("brier","auc"),nullModel=FALSE,splitMethod="bootcv",B=2)
r <- pec(list(a,b),data=pbc,start=NULL,Surv(time,status!=1)~1,times=c(100,500,1000),exact=FALSE)
u <- with(pbc,timeROC(T=time,delta=status!=0,marker=1-predictSurvProb(a,times=1500,newdata=pbc),cause=1,times=1500,iid=TRUE))
u2 <- with(pbc,timeROC(T=time,delta=status!=0,marker=1-predictSurvProb(b,times=1500,newdata=pbc),cause=1,times=c(1500)))
v <- Score(list(a,b),data=pbc,formula=Surv(time,status!=0)~1,times=c(500,1500),metrics=c("AUC"))
u
v
predictSurvProb.numeric <- function(object,newdata,times,...){
    if (NROW(object) != NROW(newdata))
        ## || NCOL(object) != length(times))
        stop(paste("\nPrediction matrix has wrong dimensions:\nRequested newdata x times: ",NROW(newdata)," x ",length(times),"\nProvided prediction matrix: ",NROW(object)," x ",NCOL(object),"\n\n",sep=""))
    object
}
train.d <- SimSurv(300)
test.d <- SimSurv(30)
f12 <- coxph(Surv(time,status)~X1+X2,data=train.d)
f1 <- coxph(Surv(time,status)~X1,data=train.d)
f2 <- coxph(Surv(time,status)~X2,data=train.d)
r <- pec(list(f2),data=mini,Hist(time,status)~1,times=5,exact=FALSE)
mini <- data.frame(time=c(4,2,3,6,7),status=c(1,0,1,1,1),X2=c(-.1,0.1,-0.03,0.04,0.3),X1=c(0,1,0,1,0))
p1 <- predictSurvProb(f1,newdata=mini,times=3.4)
p2 <- predictSurvProb(f2,newdata=mini,times=3.4)
Source(riskScore)
testit <- Score(list(f2),data=test.d,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC")
## testmini <- Score(list(f2,f1),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC")
testmini <- Score(list(f2),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC")
testmini$noSplitPerf[[1]]$AUC
with(mini,timeROC(T=time,delta=status,marker=-p2,cause=1,times=3.4))
u <- with(mini,timeROC(T=time,delta=status,marker=p1,cause=1,times=3.4,iid=TRUE))
estmini <- Score(list(p1),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC")
u2 <- with(mini,timeROC(T=time,delta=status,marker=p2,cause=1,times=3.4,iid=TRUE))
estmini2 <- Score(list(-p2),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC")
#+END_SRC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
ttt <- seq(1,10)
ttt <- 8
set.seed(8)
train.d <- SimSurv(8)
train.d <- train.d[order(train.d$time,-train.d$status),]
Source(riskScore,silent=TRUE);testauc <- Score(list(train.d$X2),data=train.d,times=ttt,metrics="AUC",censModel="marginal",splitMethod="none",formula=Surv(time,status)~1)
testauc$noSplitPerf
Source(timeROC,silent=TRUE);troc <- with(train.d,timeROC(T=time,delta=status,marker=X2,cause=1,times=ttt))
head(cbind(troc$FP[,2],troc$TP[,2]))
#+END_SRC

** fixed marker, several time points

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
ttt <- seq(1,10)
set.seed(899)
train.d <- SimSurv(300)
train.d <- train.d[order(train.d$time,-train.d$status),]
Source(riskScore,silent=TRUE);testauc <- Score(list(train.d$X2),data=train.d,times=ttt,metrics="AUC",censModel="marginal",splitMethod="none",formula=Surv(time,status)~1)
Source(timeROC,silent=TRUE);troc <- with(train.d,timeROC(T=time,delta=status,marker=X2,cause=1,times=ttt))
plot(troc$times,troc$AUC,lwd=7,col=2,xlim=range(troc$times),ylim=c(0.5,1),type="b")
lines(testauc$times,unlist(testauc$noSplitPerf$numeric$AUC),col="orange",lwd=2)
#+END_SRC

** Cox model, several time points

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
set.seed(899)
train.d <- SimSurv(300)
train.d <- train.d[order(train.d$time,-train.d$status),]
f2 <- coxph(Surv(time,status)~X2,data=train.d)
Source(riskScore,silent=TRUE);testauc <- Score(list(f2),data=train.d,times=ttt,metrics="AUC",censModel="marginal",splitMethod="none",formula=Surv(time,status)~1)
troc.auc <- sapply(ttt,function(t){
                       troc <- with(train.d,timeROC(T=time,delta=status,marker=-predictSurvProb(f2,times=t,newdata=train.d),cause=1,times=t))$AUC[[2]]
                   })
plot(ttt,troc.auc,lwd=7,col=2,xlim=range(troc$times),ylim=c(0.5,1),type="b")
lines(testauc$AUC$score[model=="coxph",times],testauc$AUC$score[model=="coxph",AUC],col="yellow",lwd=3)
#+END_SRC

** Cox model, cross-validation
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes
Source(riskScore,silent=TRUE)
set.seed(899)
train.d <- SimSurv(300)
train.d <- train.d[order(train.d$time,-train.d$status),]
library(rms)
f2 <- cph(Surv(time,status)~X2,data=train.d,surv=TRUE)
f2a <- cph(Surv(time,status)~X2,data=train.d,surv=TRUE)
ttt <- c(2,4,8)
ttt <- c(5,8)
Source(riskScore,silent=TRUE)
cv.brier <- Score(list(f2a),data=train.d,times=ttt,metrics="Brier",censModel="marginal",splitMethod="bootcv",B=3,formula=Surv(time,status)~1)
cv.auc <- Score(list(f2a),data=train.d,times=ttt,metrics="AUC",censModel="marginal",splitMethod="bootcv",B=3,formula=Surv(time,status)~1)
cv.both <- Score(list(f2,f2a),data=train.d,times=ttt,metrics=c("auC","briEr"),censModel="marginal",splitMethod="bootcv",B=3,formula=Surv(time,status)~1)
#+END_SRC

** iid KM vs timeROC
   
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(timeROC)
library(prodlim)
library(riskScore)
d <- SimSurv(2000)
d <- d[order(d$time,-d$status),]
system.time(x <- riskScore:::getInfluenceCurve.KM(d$time,d$status))
system.time(y <- timeROC:::Compute.iid.KM(d$time,d$status))
all.equal(x,y)
#+END_SRC

#+RESULTS[<2016-01-04 16:29:48> 711bad92184ad64dcb90b92ca4f08742a00c02b8]:
:RESULTS:

Seconds:
   user  system elapsed 
  0.168   0.000   0.170

Seconds:
   user  system elapsed 
  1.348   0.000   1.349
[1] "Attributes: < Length mismatch: comparison on first 1 components >"
:END:

* Competing risks

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(riskScore)
library(timeROC)
library(rms)
ex <- data.frame(time=c(1.3,2.5,1,4,2,3,6,7,9),status=c(1,1,2,1,0,2,1,2,1),X1=c(5,7,8,1,1,3,4,3,0),X2=c(2,9,8,1,1,3,4,3,0))
Source(timeROC,silent=TRUE);with(ex,timeROC(T=time,delta=status,marker=X1,cause=1,times=4.1,iid=TRUE))
Source(riskScore,silent=TRUE);Score(list(ex$X1),data=ex,formula=Hist(time,status)~1,times=4.1,metrics="aUc",nullModel=FALSE)
Source(timeROC,silent=TRUE);with(ex,timeROC(T=time,delta=status,marker=X2,cause=1,times=4.1,iid=TRUE))
Source(riskScore,silent=TRUE);Score(list(ex$X2),data=ex,formula=Hist(time,status)~1,times=4.1,metrics="aUc",nullModel=FALSE)
#+END_SRC
